<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- 
		*root-context.xml
		서버 구동과 구동시에 web.xml 파일을 거쳐서 바로 로딩되는 문서
		-서버 구동과 동시에 세팅해야하는 내용들을 작성(주로 DB연결,트랜젝션처리,내외부 모듈 연결등등)
	 -->
	 
	 <!-- DB 연결 설정 -->
	 <!-- 1단계. DB연결을 위한 도구 설정 -->
	 <bean class="org.apache.commons.dbcp.BasicDataSource" id="dataSource" destroy-method="close">
	 	<!-- 어느 DB에 접속할 것인지 설정 -->
	 	<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
	 	<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"/>
	 	<property name="username" value="CCC"/>
	 	<property name="password" value="CCC"/>
	 </bean>
	 
	 <!-- 
	 	객체가 필요하여 사용한다면 내부적으로
	 	BasicDateSource dataSource = new BasicDateSource();
	 	dataSource.setDriverClassName("oracle.jdbc.driver.OracleDriver");
	 	dataSource.setUrl("jdbc:oracle:thin:@localhost:1521:xe");
	 	dataSource.setUserName("spring");
	 	dataSource.setPassword("spring";
	  -->
	  
	  <!-- 2단계. MyBatis Spring에서 제공하는 SQL 명령어 실행을 위한 도구 등록 -->
	  <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
	  	<!-- mybatis 설정파일의 위치를 설정(src/main/resources)하여 설정값을 가져오겠다.
	  		이때 classpath: 구문이 resource 폴더를 의미한다. -->
	  	<property name="configLocation" value="classpath:mybatis-config.xml"/>
	  	<!-- 연결을 위한 도구 참조(위에서 만든 dataSource Bean을 참조) -->
	  	<property name="dataSource" ref="dataSource"/>
	  </bean>
	  
	  <!-- 
	  	객체가 필요할떄마다 내부적으로 실행되는 코드
	  	SqlSessionFactoryBean sqlSessionFactory = new SqlSessionFactoryBean();
	  	sqlSessionFactory.setConfigLocation("classpath:mybatis-config.xml");
	  	sqlSessionFactory.setDataSource(dataSource);
	   -->
	  <!-- 3단계. SQL 구문 실행을 위한 템플릿을 제공하는 도구 등록 -->
	  	<bean class="org.mybatis.spring.SqlSessionTemplate" id="sqlSession">
	  		<!-- SQL명령어 실행을 위한 도구에 대한 참조 설정 -->
	  		<constructor-arg ref="sqlSessionFactory"/>
	  	</bean>
	  	
	  <!-- 내부적으로 실행되는 코드
		  SqlSessionTemplate sqlSession = new SqlSessionTemplate(sqlSessionFactory);
	   -->
	   
	<!-- 
		property : setter 주입
		constructor-arg : 생성자 주입
	-->
	
	<!-- 아래는 파일업로드를 위한 도구등록 -->
	<bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver" id="multipartResolver">
		<!--  인코딩 타입  defaultEncoding : 업로드 되는 파일에 대해 인코딩 처리를 어떻게 할것인지 지정하는 속성-->
		<property name="defaultEncoding" value="UTF-8"></property>
		
		<!--
			maxUploadSize : 한번에 전체 업로드 되는 파일의 총 용량
			maxUploadSizePerFile : 디스크에 임시 파일을 생성하기전에 메모리에 보관할수 있는 크기 (용량)
			-최대용량을 10MByte  로 설정할꺼임
			10*1024*1024
			xml 에서는 계산식으로 적용이 불가하기때문에 직접 계산한 값을 넣어야한다
		 -->
		<property name="maxUploadSize" value="1000000000"></property>
		<property name="maxUploadSizePerFile" value="1000000000"></property>
	</bean>
</beans>